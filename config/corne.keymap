/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

#define DEFAULT 0
#define LOWER   1
#define RAISE   2
#define TOP     3

/ {
    combos { compatible = "zmk,combos"; };

    behaviors {
        // Custom mod-tap behavior optimized for fast typing
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <280>;  // Increased for fast typing
            quick-tap-ms = <150>;     // Allows quick re-taps
            require-prior-idle-ms = <150>;  // Prevents accidental triggers
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        // Custom layer-tap behavior for fast typing
        lt: layer_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP";
            #binding-cells = <2>;
            tapping-term-ms = <280>;  // Increased timeout
            quick-tap-ms = <200>;     // Generous quick-tap window
            require-prior-idle-ms = <150>;  // Prevents accidental triggers
            flavor = "tap-preferred";
            bindings = <&mo>, <&kp>;
        };

        // Custom mod-tap for Space/Enter with Shift
        mt_fast: mod_tap_fast {
            compatible = "zmk,behavior-hold-tap";
            label = "MOD_TAP_FAST";
            #binding-cells = <2>;
            tapping-term-ms = <300>;  // Long timeout for fast typing
            quick-tap-ms = <200>;     // Quick space/enter repeats
            require-prior-idle-ms = <125>;  // Prevent accidental shifts
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <0>;  // Only trigger on intentional holds
        };

        qq: qq {
            compatible = "zmk,behavior-mod-morph";
            label = "QQ";
            bindings = <&kp Q>, <&kp EXCLAMATION>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LALT|MOD_LSFT|MOD_LGUI)>;
        };

        ww: ww {
            compatible = "zmk,behavior-mod-morph";
            label = "WW";
            bindings = <&kp W>, <&kp AT_SIGN>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LALT|MOD_LSFT|MOD_LGUI)>;
        };

        ee: ee {
            compatible = "zmk,behavior-mod-morph";
            label = "EE";
            bindings = <&kp E>, <&kp HASH>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LALT|MOD_LSFT|MOD_LGUI)>;
        };

        rr: rr {
            compatible = "zmk,behavior-mod-morph";
            label = "RR";
            bindings = <&kp R>, <&kp DOLLAR>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LALT|MOD_LSFT|MOD_LGUI)>;
        };

        tt: tt {
            compatible = "zmk,behavior-mod-morph";
            label = "TT";
            bindings = <&kp T>, <&kp PERCENT>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LALT|MOD_LSFT|MOD_LGUI)>;
        };

        yy: yy {
            compatible = "zmk,behavior-mod-morph";
            label = "YY";
            bindings = <&kp Y>, <&kp CARET>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LALT|MOD_LSFT|MOD_LGUI)>;
        };

        uu: uu {
            compatible = "zmk,behavior-mod-morph";
            label = "UU";
            bindings = <&kp U>, <&kp AMPERSAND>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LALT|MOD_LSFT|MOD_LGUI)>;
        };

        ii: ii {
            compatible = "zmk,behavior-mod-morph";
            label = "II";
            bindings = <&kp I>, <&kp ASTERISK>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LALT|MOD_LSFT|MOD_LGUI)>;
        };

        oo: oo {
            compatible = "zmk,behavior-mod-morph";
            label = "OO";
            bindings = <&kp O>, <&kp LEFT_PARENTHESIS>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LALT|MOD_LSFT|MOD_LGUI)>;
        };

        pp: pp {
            compatible = "zmk,behavior-mod-morph";
            label = "PP";
            bindings = <&kp P>, <&kp RIGHT_PARENTHESIS>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LALT|MOD_LSFT|MOD_LGUI)>;
        };

        shift_screenshot: shift_screenshot {
            compatible = "zmk,behavior-tap-dance";
            label = "SHIFT_SCREENSHOT";
            #binding-cells = <0>;
            bindings = <&kp LSHIFT>, <&screenshot>;
        };
    };

    macros {
        screenshot: screenshot {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LS(N4))>;
            label = "SCREENSHOT";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp TAB            &kp Q  &kp W    &kp E      &kp R     &kp T                   &kp Y                  &kp U    &kp I      &kp O    &kp P     &kp BSPC
&kp LEFT_CONTROL   &kp A  &lt 3 S  &lt 2 D    &lt 1 F   &kp G                   &kp H                  &lt 1 J  &lt 2 K    &lt 3 L  &kp SEMI  &kp SQT
&shift_screenshot  &kp Z  &kp X    &kp C      &kp V     &kp B                   &kp N                  &kp M    &kp COMMA  &kp DOT  &kp FSLH  &mo 1
                                   &kp LCTRL  &kp LGUI  &mt_fast LEFT_SHIFT ENTER    &mt_fast RIGHT_SHIFT SPACE  &mo 2    &kp RALT
            >;
        };

        lower_layer {
            bindings = <
&kp TAB    &kp NUMBER_1  &kp N2  &kp N3        &kp N4        &kp N5              &kp N6    &kp N7    &kp N8       &kp N9         &kp N0    &kp DEL
&trans     &trans        &trans  &kp C_VOL_DN  &kp C_VOL_UP  &kp K_MUTE          &kp LEFT  &kp DOWN  &kp UP       &kp RIGHT      &kp LBKT  &kp GRAVE
&kp LSHFT  &trans        &trans  &kp C_PREV    &kp C_NEXT    &kp C_PLAY_PAUSE    &kp HOME  &kp END   &kp PAGE_UP  &kp PAGE_DOWN  &kp BSLH  &trans
                                 &trans        &trans        &trans              &trans    &trans    &trans
            >;
        };

        top_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  BRIGHT_UP  |  BRIGHT_DOWN  |  VOL_DOWN  |  VOL_UP  |  MUTE  |      |  -  |  7  |  8  |  9  |  +  | BKSP |
            // | CTRL |             |               |             |         |        |      |  .  |  4  |  5  |  6  |  -  |  `   |
            // | SHFT |             |              |             |          |        |      |  0  |  1  |  2  |  3  |  *  |  /   |
            //                      |              |             |          |         |     |     |     |

            bindings = <
&trans     &kp LS(NUMBER_1)  &kp LS(N2)  &kp LS(N3)  &kp LS(N4)       &kp LS(N5)    &kp RS(N6)      &kp RS(N7)  &kp RS(N8)        &kp RS(N0)         &trans         &kp BSPC
&trans     &trans            &trans      &trans      &rgb_ug RGB_TOG  &bl BL_TOG    &kp MINUS       &kp EQUAL   &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &trans         &trans
&kp LSHFT  &trans            &trans      &trans      &trans           &trans        &kp UNDERSCORE  &kp PLUS    &kp LEFT_BRACE    &kp RIGHT_BRACE    &kp KP_DIVIDE  &trans
                                         &kp LCTRL   &kp LEFT_GUI     &trans        &kp KP_N0       &trans      &kp KP_DOT
            >;
        };

        layer_3 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans          &trans          &trans        &trans           &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP  &mmv MOVE_RIGHT  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans          &trans          &trans        &trans           &trans  &trans
                        &trans  &trans  &trans    &mkp LCLK       &trans          &trans
            >;
        };
    };
};
